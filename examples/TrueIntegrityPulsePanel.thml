<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>DSDK - Advanced TrueIntegrityPulsePanel Demo</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="../DynamicSciFiDashboardKit.css">
    <style>
        body {
            background-color: #030508; /* Más oscuro aún */
            color: #e8e8e8;
            font-family: 'Orbitron', 'Segoe UI', sans-serif; /* Fuente más Sci-Fi si está disponible */
            padding-top: 20px;
            padding-bottom: 30px;
            overflow-x: hidden;
        }
        @font-face { /* Opcional: si quieres usar Orbitron */
            font-family: 'Orbitron';
            src: url('https://fonts.gstatic.com/s/orbitron/v25/yMJMMIlzdpvBhQQL_SC3X9yhF25-T1AoVg.woff2') format('woff2');
            font-weight: 400;
            font-style: normal;
        }
        .page-header {
            text-align: center;
            margin-bottom: 2.5rem;
            color: var(--dsdk-accent-color-main, #8A2BE2);
            font-size: 2.2rem;
            font-weight: 500;
            letter-spacing: 0.15em;
            text-transform: uppercase;
            text-shadow: 0 0 8px var(--dsdk-accent-color-main, #8A2BE2), 
                         0 0 15px var(--dsdk-accent-color-main, #8A2BE2),
                         0 0 2px #fff;
            animation: pageTitleGlow 3s infinite alternate ease-in-out;
        }
        @keyframes pageTitleGlow {
            from { opacity: 0.8; }
            to { opacity: 1; }
        }

        .panel-container {
            height: 380px; /* Un poco más de altura para más barras/info */
            display: flex; 
            flex-direction: column;
            border-radius: 0.5rem; /* Coincidir con el panel */
            background-color: rgba(10, 10, 20, 0.3); /* Fondo sutil para el contenedor */
            padding: 8px;
            box-shadow: 0 0 15px rgba(0,0,0,0.5), inset 0 0 8px rgba(0,0,0,0.4);
        }
        .panel-container > div[id^="advPulsePanel"] {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        .panel-container > div[id^="advPulsePanel"] > .dsdk-panel {
             height: 100%;
        }
        .dsdk-panel-header { /* Un estilo un poco más pronunciado para los headers */
            font-size: 0.95rem;
            text-shadow: 0 0 3px currentColor;
        }
    </style>
</head>
<body>

    <div class="container-fluid px-lg-5">
        <h1 class="page-header">Ship Systems Integrity Matrix</h1>
        <div class="row gy-4 gx-lg-4"> 
            <div class="col-xl-3 col-lg-6">
                <div class="panel-container">
                    <div id="advPulsePanel1"></div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6">
                <div class="panel-container">
                    <div id="advPulsePanel2"></div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6">
                <div class="panel-container">
                    <div id="advPulsePanel3"></div>
                </div>
            </div>
            <div class="col-xl-3 col-lg-6">
                <div class="panel-container">
                    <div id="advPulsePanel4"></div>
                </div>
            </div>
        </div>
    </div>

    <script src="../DynamicSciFiDashboardKit.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const DSDK = DynamicSciFiDashboardKit;

            const globalSystemStates = ['stable', 'normal', 'warning', 'critical'];
            let globalTick = 0;

            // --- Panel 1: Engine Diagnostics ---
            const enginePanel = new DSDK.TrueIntegrityPulsePanel('#advPulsePanel1', {
                title: 'Engine Diagnostics',
                initialState: 'stable',
                barAnimation: true,
                particleEffectType: '1',
                enableScanlineHalo: true,
                barConfigs: [
                    { id: 'thrust_main', label: 'Main Thruster', initialValue: 90, units: '%', barWidth: '28%' },
                    { id: 'coolant_flow', label: 'Coolant Flow', initialValue: 95, units: 'L/s', minValue: 0, maxValue: 120 },
                    { id: 'fuel_mix', label: 'Fuel Ratio', initialValue: 50, units: 'α/β', minValue: 30, maxValue: 70 },
                    { id: 'vibration', label: 'Dampers', initialValue: 5, units: 'μm', minValue: 0, maxValue: 50 } // Lower is better
                ]
            });

            // --- Panel 2: Network & Comms ---
            const networkPanel = new DSDK.TrueIntegrityPulsePanel('#advPulsePanel2', {
                title: 'Comms & Network',
                initialState: 'stable',
                barAnimation: false, // Variedad
                particleEffectType: '4',
                enableScanlineHalo: true,
                scanlineHaloColor: 'rgba(var(--dsdk-rgb-accent-secondary), 0.1)',
                barConfigs: [
                    { id: 'uplink', label: 'Uplink', initialValue: 1000, units: 'Mbps', minValue:0, maxValue:1200 },
                    { id: 'downlink', label: 'Downlink', initialValue: 800, units: 'Mbps', minValue:0, maxValue:1000 },
                    { id: 'latency', label: 'Latency', initialValue: 20, units: 'ms', minValue:5, maxValue:500 }, // Lower is better
                    { id: 'pkt_loss', label: 'Pkt Loss', initialValue: 0, units: '%', minValue:0, maxValue:25 }    // Lower is better
                ]
            });

            // --- Panel 3: Atmospheric Processor ---
            const atmoPanel = new DSDK.TrueIntegrityPulsePanel('#advPulsePanel3', {
                title: 'Atmospheric Control',
                initialState: 'stable',
                barAnimation: true,
                particleEffectType: '5',
                enableScanlineHalo: true,
                barConfigs: [
                    { id: 'o2_level', label: 'Oxygen', initialValue: 21, units: '%', minValue:15, maxValue:25 },
                    { id: 'n2_level', label: 'Nitrogen', initialValue: 78, units: '%', minValue:70, maxValue:85 },
                    { id: 'co2_scrub', label: 'CO2 Scrub', initialValue: 98, units: '% Eff.', minValue:0, maxValue:100 },
                    { id: 'pressure', label: 'Pressure', initialValue: 101, units: 'kPa', minValue:80, maxValue:120 },
                    { id: 'tox_filter', label: 'Toxin Filter', initialValue: 99, units: '% Eff.', minValue:0, maxValue:100 }
                ]
            });
            
            // --- Panel 4: Defense Grid Status ---
            const defensePanel = new DSDK.TrueIntegrityPulsePanel('#advPulsePanel4', {
                title: 'Defense Grid',
                initialState: 'stable',
                barAnimation: true,
                particleEffectType: '6',
                particleEffectStates: ['critical', 'warning', 'normal', 'stable'], // Particles en todos los estados
                enableScanlineHalo: true,
                barConfigs: [
                    { id: 'pd_turrets', label: 'PD Turrets', initialValue: 100, units: '% Online' },
                    { id: 'shield_cap', label: 'Shield Cap.', initialValue: 100, units: '%' },
                    { id: 'counterm', label: 'Counterm.', initialValue: 10, units: 'Units', minValue:0, maxValue:10 },
                    { id: 'decoys', label: 'Decoys', initialValue: 5, units: 'Avail', minValue:0, maxValue:5 }
                ]
            });

            const allManagedPanels = [
                { panel: enginePanel, health: 100, name: "Engine" },
                { panel: networkPanel, health: 100, name: "Network" },
                { panel: atmoPanel, health: 100, name: "Atmosphere" },
                { panel: defensePanel, health: 100, name: "Defense" }
            ];

            function updatePanelHealthAndState(managedPanel) {
                // Simulate health degradation/recovery
                if (Math.random() < 0.03) { // Small chance of a significant event
                    managedPanel.health += (Math.random() - 0.6) * 40; // Can be positive or negative hit
                } else {
                    managedPanel.health += (Math.random() - 0.45) * 5; // Normal fluctuation, slight bias to degrade
                }
                managedPanel.health = Math.max(0, Math.min(100, managedPanel.health));

                let newState;
                if (managedPanel.health < 25) newState = 'critical';
                else if (managedPanel.health < 50) newState = 'warning';
                else if (managedPanel.health < 85) newState = 'normal';
                else newState = 'stable';
                
                if (managedPanel.panel.currentState !== newState) {
                    managedPanel.panel.setPanelState(newState);
                }
                return newState; // Return current state for value generation
            }

            function generateBarValue(panelInstance, barConf, panelState, panelHealth, barId, tick) { // <--- SE AÑADE panelInstance
                let baseValue = barConf.initialValue;
                // Usar panelInstance para acceder a la configuración global del panel si es necesario
                let min = barConf.minValue !== undefined ? barConf.minValue : panelInstance.config.minValue; // <--- CAMBIO AQUÍ
                let max = barConf.maxValue !== undefined ? barConf.maxValue : panelInstance.config.maxValue; // <--- CAMBIO AQUÍ
                let range = max - min;
                let value = barConf.currentValue !== undefined ? barConf.currentValue : baseValue;

                let healthFactor = panelHealth / 100; 
                let isLowerBetter = (barId === 'vibration' || barId === 'latency' || barId === 'pkt_loss');

                if (isLowerBetter) {
                    value = min + (1 - healthFactor) * range * (0.2 + Math.random() * 0.8);
                } else {
                    value = min + healthFactor * range * (0.2 + Math.random() * 0.8);
                }
                
                let fluctuationRatio = 0.05; 
                if (panelState === 'critical') fluctuationRatio = 0.25;
                else if (panelState === 'warning') fluctuationRatio = 0.15;
                
                value += (Math.random() - 0.5) * range * fluctuationRatio;
                value += Math.sin(tick * 0.1 + barId.charCodeAt(0)) * range * 0.03;

                return Math.max(min, Math.min(max, value));
            }


            function updateAllPanels() {
                globalTick++;
                allManagedPanels.forEach(mp => {
                    const currentPanelState = updatePanelHealthAndState(mp);
                    mp.panel.config.barConfigs.forEach(barConfig => {
                        // Pasar mp.panel (la instancia del panel) a generateBarValue
                        const newValue = generateBarValue(mp.panel, barConfig, currentPanelState, mp.health, barConfig.id, globalTick); // <--- CAMBIO AQUÍ
                        barConfig.currentValue = newValue; 
                        mp.panel.updateBarValue(barConfig.id, newValue);
                    });
                });
            }

            setInterval(updateAllPanels, 300);
            updateAllPanels(); 
        });
    </script>
    <!-- Bootstrap 5 JS Bundle (incluye Popper) -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
